#! /usr/bin/env python3

import os
import sys
import struct
import argparse
import sqlite3
from contextlib import closing
from collections import defaultdict
import numpy as np
import scipy
import xlsxwriter


class Data:
    def __init__(self, pkg, arch, sums: list[float]):
        self.pkg = pkg
        self.arch = arch
        self.sums = sums


def read_total_file(p):
    with open(p, 'r') as f:
        lines = f.readlines()
        names = []
        sums  = []
        for line in lines:
            ns  = line.strip().split(',')[0]
            res = line.strip().split(',')[1]
            names.append(ns)
            sums.append(res)

        return names, sums


def find_data(ds, p, a):
    for d in ds:
        if d.pkg == p and d.arch == a:
            return d
    print(f'Bad {p} and {a}')
    exit(-1)


"""
This script reads a file that contains paths to `total.csv` in the form (generated by `fd total.csv`):

rv64_milkv/gzip/total.csv

and aggregates the data in these files.
The csv data is produced by `rvbench_test_start.py`.

This script current must be invoked in a dir such that the paths can be read directly.

Output format:
arch1,score_of_p1,score_of_p2,score_of_p3,...
arch2,score_of_p1,score_of_p2,score_of_p3,...
"""

if __name__ == '__main__':
    files = sys.argv[1]
    out   = sys.argv[2]

    if not os.path.isdir(out):
        print(f'Not a dir: {out}')
        exit(-1)

    with open(files, 'r') as f:
        lines = f.readlines()
        ds = []

        names = None
        for l in lines:
            tokens = l.split('/')
            arch = tokens[0]
            pkg = tokens[1]
            ns, sums = read_total_file(l.strip())
            if names is None:
                names = ns
            ds.append(Data(pkg, arch, sums))

        # print(ds)
        pkgs  = list(set(map(lambda d: d.pkg, ds)))
        archs = list(set(map(lambda d: d.arch, ds)))
        # print(pkgs)
        # print(archs)

        with open(f'{out}/sum.csv', 'w') as outf:
            for i in range(len(ds[0].sums)):
                outf.write(f'{names[i]}\n')
                outf.write(',')
                for p in pkgs:
                    outf.write(f'{p},')
                outf.write('total\n')
                for a in archs:
                    outf.write(f'{a},')
                    scores = 0
                    for p in pkgs:
                        d = find_data(ds, p, a)
                        outf.write(f'{d.sums[i]},')
                        scores += float(d.sums[i])
                    outf.write(f'{scores}\n')
                outf.write('\n')

